---
layout: post
title: 数据结构
date: 2018-04-04 17:32:20 +0300
description: You’ll find this post in your `_posts` directory. Go ahead and edit it and re-build the site to see your changes.
img:  # Add image post (optional)添加图像帖子(可选)
tags: [数据结构]
---


在我们学习Java的时候，很多人会面临我不知道继续学什么或者面试会问什么的尴尬情况（我本人之前就很迷茫）。所以，我决定通过这个开源平台来帮助一些有需要的人，通过下面的内容，你会掌握系统的Java学习以及面试的相关知识。本来是想通过Gitbook的形式来制作的，后来想了想觉得可能有点大题小做。另外，我自己一个人的力量毕竟有限，希望各位有想法的朋友可以提issue和pull。

-----------**最新更新5/9/16:00**----------

**Java面试通关手册（Java学习指南）github 地址**：[https://github.com/Snailclimb/Java_Guide](https://github.com/Snailclimb/Java_Guide)

如果你觉得有什么问题可以给我提issue，觉得不错的话你也可以star一下。目前更新的内容并不多，因为为了保证文章质量，每一篇文章我自己都看了一遍，希望大家贡献自己的力量完善。

### 数据结构
推荐学习视频：[浙江大学数据结构国家精品教程](https://www.icourse163.org/course/ZJU-93001)
- **Queue**

  [Java集合类分析之Queue](http://wanglizhi.github.io/2016/06/18/Java-Queue/)
- **Set**
    
    [由浅入深理解java集合(二)——集合 Set](https://www.jianshu.com/p/9081017a2d67)
- **List**
    
   [Java 集合系列08之 List总结(LinkedList, ArrayList等使用场景和性能分析)](http://www.cnblogs.com/skywang12345/p/3308900.html)

   **ArrayList** 是一个数组队列，相当于动态数组。它由数组实现，随机访问效率高，随机插入、随机删除效率低。

	**LinkedList** 是一个双向链表。它也可以被当作堆栈、队列或双端队列进行操作。LinkedList随机访问效率低，但随机插入、随机删除效率低。
	
	**Vector** 是矢量队列，和ArrayList一样，它也是一个动态数组，由数组实现。但是ArrayList是非线程安全的，而Vector是线程安全的。
	
   **Stack**  是栈，它继承于Vector。它的特性是：先进后出(FILO, First In Last Out)。
   
    [集合框架源码学习之ArrayList](https://juejin.im/post/5aafa05a6fb9a028c06aa217)
    
	注意ArrayList的扩容机制(注意移位运算符的使用)以及System.arraycopy()和Arrays.copyOf()方法在ArrayList集合源码中的使用。
	
	[集合框架源码学习之LinkedList](https://juejin.im/post/5aafab9651882555635e219a)
	
	[java数据结构与算法之顺序表与链表深入分析](https://blog.csdn.net/javazejian/article/details/52953190)

- **Map**

  [集合框架源码学习之HashMap(JDK1.8)](https://juejin.im/post/5ab0568b5188255580020e56)
  
  [ConcurrentHashMap实现原理及源码分析](https://link.juejin.im/?target=http%3A%2F%2Fwww.cnblogs.com%2Fchengxiao%2Fp%2F6842045.html)
- **Stack(栈)**

  [java数据结构与算法之栈（Stack）设计与实现](https://blog.csdn.net/javazejian/article/details/53362993)
- **树**
  * **1 二叉树**
  
     [二叉树](https://baike.baidu.com/item/%E4%BA%8C%E5%8F%89%E6%A0%91)（百度百科）

	(1)[完全二叉树](https://baike.baidu.com/item/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91)——若设二叉树的高度为h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到最大个数，第h层有叶子结点，并且叶子结点都是从左到右依次排布，这就是完全二叉树。
	
	(2)[满二叉树](https://baike.baidu.com/item/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91)——除了叶结点外每一个结点都有左右子叶且叶子结点都处在最底层的二叉树。
	
	(3)[平衡二叉树](https://baike.baidu.com/item/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91/10421057)——平衡二叉树又被称为AVL树（区别于AVL算法），它是一棵二叉排序树，且具有以下性质：它是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。 

  * **2 完全二叉树**

    [完全二叉树](https://baike.baidu.com/item/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91)（百度百科）
    
    完全二叉树：叶节点只能出现在最下层和次下层，并且最下面一层的结点都集中在该层最左边的若干位置的二叉树
  * **3 满二叉树**
     
     [满二叉树](https://baike.baidu.com/item/%E6%BB%A1%E4%BA%8C%E5%8F%89%E6%A0%91)（百度百科，国内外的定义不同）

	 国内教程定义：一个二叉树，如果每一个层的结点数都达到最大值，则这个二叉树就是满二叉树。也就是说，如果一个二叉树的层数为K，且结点总数是(2^k) -1 ，则它就是满二叉树。
  * **堆**
  
     [数据结构之堆的定义](https://blog.csdn.net/qq_33186366/article/details/51876191)

    堆是具有以下性质的完全二叉树：每个结点的值都大于或等于其左右孩子结点的值，称为大顶堆；或者每个结点的值都小于或等于其左右孩子结点的值，称为小顶堆
  *  **4 二叉查找树（BST）**
    
     [浅谈算法和数据结构: 七 二叉查找树](http://www.cnblogs.com/yangecnu/p/Introduce-Binary-Search-Tree.html)

	  二叉查找树的特点：

	  1. 若任意节点的左子树不空，则左子树上所有结点的     值均小于它的根结点的值；
	  2. 若任意节点的右子树不空，则右子树上所有结点的值均大于它的根结点的值；
	  3. 任意节点的左、右子树也分别为二叉查找树。
	  4. 没有键值相等的节点（no duplicate nodes）。

  *  **5 平衡二叉树（Self-balancing binary search tree）**
  
     [ 平衡二叉树](https://baike.baidu.com/item/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91)（百度百科，平衡二叉树的常用实现方法有红黑树、AVL、替罪羊树、Treap、伸展树等）
  *  **6 红黑树**
    
     红黑树特点:
	  1. 每个节点不是红色就是黑色的；
	  2. 根节点总是黑色的；
	  3. 所有的叶节点都是是黑色的（红黑树的叶子节点都是空节点（NIL或者NULL））；
	  4. 如果节点是红色的，则它的子节点必须是黑色的（反之不一定）；
	  5. 从根节点到叶节点或空子节点的每条路径，必须包含相同数目的黑色节点（即相同的黑色高度）
	 
      [漫画：什么是红黑树？](https://juejin.im/post/5a27c6946fb9a04509096248#comment)（也介绍到了二叉查找树）
	 
      [寻找红黑树的操作手册](http://dandanlove.com/2018/03/18/red-black-tree/)（文章排版以及思路真的不错）
    
      [红黑树深入剖析及Java实现](https://zhuanlan.zhihu.com/p/24367771)（美团点评技术团队）    
  *  **7 B-，B+，B*树**
  
      [二叉树学习笔记之B树、B+树、B*树 ](https://yq.aliyun.com/articles/38345)

	  [《B-树，B+树，B*树详解》](https://blog.csdn.net/aqzwss/article/details/53074186)

      [《B-树，B+树与B*树的优缺点比较》](https://blog.csdn.net/bigtree_3721/article/details/73632405)
    
     B-树（或B树）是一种平衡的多路查找(又称排序)树，在文件系统中有所应用。主要用作文件的索引。其中的B就表示平衡(Balance) 
 	1. B+ 树的叶子节点链表结构相比于 B- 树便于扫库，和范围检索。
	2. B+树支持range-query(区间查询)非常方便，而B树不支持。这是数据库选用B+树的最主要原因。
	3. B*树 是B+树的变体，B*树分配新结点的概率比B+树要低，空间使用率更高；
  *  **8 LSM 树**
    
     [[HBase] LSM树 VS B+树](https://blog.csdn.net/dbanote/article/details/8897599)
	  
     B+树最大的性能问题是会产生大量的随机IO

	 为了克服B+树的弱点，HBase引入了LSM树的概念，即Log-Structured Merge-Trees。
    
     [LSM树由来、设计思想以及应用到HBase的索引](http://www.cnblogs.com/yanghuahui/p/3483754.html)
